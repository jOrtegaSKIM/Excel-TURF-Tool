showNotification("The stepwise+swapping method is not yet implemented for bucketed optimization, changing to full-search method instead...")
stepwise <- FALSE
k_iter <- c(k)
}
control$iter_fixed <- control$lst_fixed
start_from <- start_from[[as.name(k-k_iter[length(k_iter)])]]
if (stepwise & !is.null(start_from)) {
best <- start_from[1,2:ncol(start_from)]
control$iter_fixed <- append(control$iter_fixed,
sapply(best, function(i) remove_prefix(i,control$prefix)))
k_iter <- k_iter[length(k_iter)]
}
results <- NULL
for (i in seq_along(k_iter)) {
nck <- get.combinations(k_iter[i],control)
nck_bin <- get.dummies(nck,control)
nck_bin$none <- if (control$none) 1 else 0
if (i < length(k_iter)) {
results <- run.turf(nck_bin,utils,control)
best <- results[1,2:ncol(results)]
control$iter_fixed <- append(control$iter_fixed,
sapply(best,function(i) remove_prefix(i,control$prefix)))
} else {
results <- run.turf(nck_bin,utils,control)
}
}
if (stepwise) {
control$iter_fixed <- control$lst_fixed
results <- results %>%
rbind(.,run.swapping(results,utils,control))
results <- results[!duplicated(results),]
results <- results[order(results[,control$kpi],decreasing=TRUE),]
colnames(results) <- c(control$kpi,sapply(1:k,function(i) paste0(i, " Item")))
results <- list("stepwise+swapping",results)
} else {
colnames(results) <- c(control$kpi,sapply(1:k,function(i) paste0(i, " Item")))
results <- list("full-search",results)
}
return(results)
}
# Iteration of swapping algorithm
swap <- function(comb,control){
comb <- comb[,2:ncol(comb)]
comb <- mapply(function(x) remove_prefix(x,control$prefix), comb)
alt <- setdiff(control$lst_cte,comb)
alt <- setdiff(alt,control$lst_fixed)
output <- c()
for (i in seq_along(comb)) {
new <- copy(comb)
for (j in alt) {
new[i] <- j
output <- rbind(output,new[order(new)])
}
}
output <- output %>% data.frame()
rownames(output) <- 1:nrow(output)
return(output)
}
# Function that runs swapping
run.swapping <- function(results,utils,control){
top <- min(nrow(results),100)
swapped <- future_lapply(1:top,
function(i) swap(results[i,],control))
swapped <- do.call(rbind,swapped)
swapped <- swapped[!duplicated(swapped),]
swap_bin <- swapped %>% get.dummies(.,control)
swap_bin$none <- if (control$none) 1 else 0
output <- run.turf(swap_bin,utils,control)
return(output)
}
# Function that performs a paired t-test over the top K combos
paired.ttest <- function(results,utils,control) {
if (dim(results)[1] == 1) return(results)
results <- results[1:min(nrow(results),control$top),]
rn <- rownames(results)
results <- results[,2:ncol(results)] %>%
mapply(function(x) remove_prefix(x,control$prefix),.)
results_bin <- results %>%
data.frame() %>% get.dummies(.,control)
results_bin$none <- if (control$none) 1 else 0
ttest_data <- run.turf(results_bin,utils,control,ttest.data=TRUE)
output <- ttest_data[[1]]
ttest_data <- ttest_data[[2]]
p_val   <- c(1)
sig_val <- c("==")
i0 <- 1
for (i in 2:nrow(output)) {
test <- t.test(ttest_data[[as.name(paste0("comb",i0))]],
ttest_data[[as.name(paste0("comb",i))]], paired=TRUE)
p_val[[i]] <- test$p.value
if (test$p.value < control$alpha) {
i0 <- i
sig_val[[i]] <- "***"
} else {
sig_val[[i]] <- "=="
}
}
output$pvalue <- p_val
output$sigtest <- sig_val
rownames(output) <- rn
return(output)
}
library(future)
library(openxlsx)
library(tidyverse)
library(future.apply)
library(Matrix)
library(data.table)
library(partitions)
library(fastDummies)
source("TURF_functions.R")
# ---- Load files ----
utils <- read.csv("utilities.csv")
inputfile <- read.csv("inputs.csv")
optionfile <- read.csv("options.csv")
# ---- Control list from optionfile and inputfile
control <- append(turf.options(optionfile), turf.inputs(inputfile))
# ---- Advanced settings ----
util_exp <- control$exponent
control$anchoring <- if (control$methodology == "MaxDiff") {
"unanchored"
} else if (control$methodology == "Anchored MaxDiff") {
"anchored"
} else {
NULL
}
# TODO: Handle buck lims
#control$use_bucks <- T
#control$buck_lims <- rep(1,9)
prohibfile <- if (control$use_prohs) read.csv("prohibitions.csv")
control$n_prohs <- if (control$use_prohs) nrow(prohibfile) else 0
control$prohs <- if (control$use_prohs) get.prohibitions(prohibfile,control$n_prohs) else list()
control$len_fixed <- length(control$lst_fixed)
control$len_comp  <- length(control$lst_comp)
control$lst <- 1:control$n
control$lst_cte <- setdiff(control$lst,control$lst_comp)
control$item_wei <- if (length(control$item_wei) == control$n) {
cbind(control$item_wei,1)
} else {
control$item_wei
}
colnames(control$item_wei) <- c(control$lst,"none")
# ---- Clean utilities ----
control$wei  <- utils[,2]
utils <- (util_exp*utils[,-c(1,2)]) %>% fix.utils(control) %>% exp()
control$prefix <- unique(sub("^(\\D+).*", "\\1", colnames(utils)))[1]
# TODO: Redefine utils$none when control$anchoring == "unanchored"
if (is.null(control$anchoring) & !control$none) {
utils$none <- 0
} else if (!is.null(control$anchoring)) {
if (control$anchoring == "anchored" & "none" %ni% colnames(utils)){
utils$none <- 1
} else if (control$anchoring == "unanchored") {
utils$none <- control$n-1
}
}
colnames(utils) <- append(control$lst, "none")
swap(c(1,2,3),control)
swap(as.data.frame(c(1,2,3)),control)
swap(as.data.frame(x1=1,x2=2,x2=3)),control)
swap(data.frame(x1=1,x2=2,x2=3),control)
library(future)
library(openxlsx)
library(tidyverse)
library(future.apply)
library(Matrix)
library(data.table)
library(partitions)
library(fastDummies)
source("TURF_functions.R")
# ---- Load files ----
utils <- read.csv("utilities.csv")
inputfile <- read.csv("inputs.csv")
optionfile <- read.csv("options.csv")
# ---- Control list from optionfile and inputfile
control <- append(turf.options(optionfile), turf.inputs(inputfile))
# ---- Advanced settings ----
util_exp <- control$exponent
control$anchoring <- if (control$methodology == "MaxDiff") {
"unanchored"
} else if (control$methodology == "Anchored MaxDiff") {
"anchored"
} else {
NULL
}
# TODO: Handle buck lims
#control$use_bucks <- T
#control$buck_lims <- rep(1,9)
prohibfile <- if (control$use_prohs) read.csv("prohibitions.csv")
control$n_prohs <- if (control$use_prohs) nrow(prohibfile) else 0
control$prohs <- if (control$use_prohs) get.prohibitions(prohibfile,control$n_prohs) else list()
control$len_fixed <- length(control$lst_fixed)
control$len_comp  <- length(control$lst_comp)
control$lst <- 1:control$n
control$lst_cte <- setdiff(control$lst,control$lst_comp)
control$item_wei <- if (length(control$item_wei) == control$n) {
cbind(control$item_wei,1)
} else {
control$item_wei
}
colnames(control$item_wei) <- c(control$lst,"none")
# ---- Clean utilities ----
control$wei  <- utils[,2]
utils <- (util_exp*utils[,-c(1,2)]) %>% fix.utils(control) %>% exp()
control$prefix <- unique(sub("^(\\D+).*", "\\1", colnames(utils)))[1]
# TODO: Redefine utils$none when control$anchoring == "unanchored"
if (is.null(control$anchoring) & !control$none) {
utils$none <- 0
} else if (!is.null(control$anchoring)) {
if (control$anchoring == "anchored" & "none" %ni% colnames(utils)){
utils$none <- 1
} else if (control$anchoring == "unanchored") {
utils$none <- control$n-1
}
}
colnames(utils) <- append(control$lst, "none")
# ---- Run TURF ----
k <- 3
# Set parallel backend
plan(multisession)
if (length(k) == 1) {
results <- stepwise.turf(k,utils,control)
results <- results[[2]][results[[2]][,1] != 0,]
write.csv(results,"TURF_results.csv", row.names=F)
} else {
results <- lapply(k, function(i) NULL)
names(results) <- k
for (ki in k) {
message(sprintf(paste0("Running TURF for k=", ki)))
res <- stepwise.turf(ki,utils,control,
start_from=results)
message(sprintf(paste0("Finished running TURF for k=", ki)))
results[[as.name(ki)]] <- res[[2]]
}
results_all <- do.call(bind_rows, (lapply(results, function(x) x[1,])))
results_all[,-1] <- reorder_items(results_all[,-1])
write.csv(results_all,"TURF_results.csv", row.names=F)
}
results
results[1,]
swap(results[1,], control)
lst_cte
control$lst_cte
results[1,] -> comb
comb <- comb[,2:ncol(comb)]
comb
comb <- mapply(function(x) remove_prefix(x,control$prefix), comb)
comb
alt <- setdiff(control$lst_cte,comb)
alt
control$lst_fixed
alt <- setdiff(alt,control$lst_fixed)
alt
output <- c()
for (i in seq_along(comb)) {
new <- copy(comb)
for (j in alt) {
new[i] <- j
output <- rbind(output,new[order(new)])
}
}
output
(!exists("ren"))
(!exists("renv"))
(!require("renv"))
working_dir <<- getwd()
k <<- 2
# Get command line arguments
args <- commandArgs(trailingOnly = TRUE)
working_dir <<- args[1]
k <<- as.numeric(args[2])
# Set working directory
setwd(working_dir)
setwd(working_dir)
working_dir <<- getwd()
k <<- 2
# Run TURF
script_path <- file.path(working_dir, "TURF_run.R")
source(script_path)
# helper to check “installed & correct version”
in_env <- function(pkg, version) {
if (!pkg %in% rownames(installed.packages())) return(FALSE)
as.character(packageVersion(pkg)) == version
}
in_env("fastDummies", "1.7.58")
in_env("fastDummies", "1.7.5")
in_env("fastDummies", "1.")
in_env("fastDummies", "1.7.5")
# install remotes if needed
if (!requireNamespace("remotes", quietly=TRUE)) {
install.packages("remotes")
}
help(remotes::install_version)
help(install_version)
help(devtools)
help("sprintf")
# helper to check whether package version is installed
in_env <- function(pkg, version) {
if (!pkg %in% rownames(installed.packages())) return(FALSE)
as.character(packageVersion(pkg)) == version
}
# install remotes if needed
if (!requireNamespace("remotes", quietly=TRUE)) {
install.packages("remotes")
}
req_pkgs <- list(
"future" = "1.34.0",
"openxlsx" = "4.2.8",
"tidyverse" = "2.0.0",
"ggplot2" = "3.5.1",
"tibble" = "3.2.1",
"tidyr" = "1.3.1",
"readr" = "2.1.5",
"purrr" = "1.0.2",
"dplyr" = "1.1.4",
"stringr" = "1.5.1",
"forcats" = "1.0.0",
"lubridate" = "1.9.4",
"future.apply" = "1.11.3",
"Matrix" = "1.7-0",
"data.table" = "1.17.0",
"partitions" = "1.10-7",
"fastDummies" = "1.7.5"
)
for (pkg in names(req_pkgs)) {
v_req <- req_pkgs[[pkg]]
# install only if missing or wrong version is installed
if (!in_env(pkg, v_req)) {
message(paste0("Installing ", pkg, v_req, "..."))
remotes::install_version(
package = pkg,
version = v_req,
repos   = "https://cloud.r-project.org",
quiet = TRUE
)
} else {
message(paste0(pkg, v_req, " already installed."))
}
}
# helper to check whether package version is installed
in_env <- function(pkg, version) {
if (!pkg %in% rownames(installed.packages())) return(FALSE)
as.character(packageVersion(pkg)) == version
}
# install remotes if needed
if (!requireNamespace("remotes", quietly=TRUE)) {
install.packages("remotes")
}
req_pkgs <- list(
"future" = "1.34.0",
"openxlsx" = "4.2.8",
"tidyverse" = "2.0.0",
"ggplot2" = "3.5.1",
"tibble" = "3.2.1",
"tidyr" = "1.3.1",
"readr" = "2.1.5",
"purrr" = "1.0.2",
"dplyr" = "1.1.4",
"stringr" = "1.5.1",
"forcats" = "1.0.0",
"lubridate" = "1.9.4",
"future.apply" = "1.11.3",
"Matrix" = "1.7-0",
"data.table" = "1.17.0",
"partitions" = "1.10",
"fastDummies" = "1.7.5"
)
for (pkg in names(req_pkgs)) {
v_req <- req_pkgs[[pkg]]
# install only if missing or wrong version is installed
if (!in_env(pkg, v_req)) {
message(paste0("Installing ", pkg, " ", v_req, "..."))
remotes::install_version(
package = pkg,
version = v_req,
repos   = "https://cloud.r-project.org",
quiet = TRUE
)
} else {
message(paste0(pkg, " ", v_req, " already installed."))
}
}
# helper to check whether package version is installed
in_env <- function(pkg, version) {
if (!pkg %in% rownames(installed.packages())) return(FALSE)
as.character(packageVersion(pkg)) == version
}
# install remotes if needed
if (!requireNamespace("remotes", quietly=TRUE)) {
install.packages("remotes")
}
req_pkgs <- list(
"future" = "1.34.0",
"openxlsx" = "4.2.8",
"tidyverse" = "2.0.0",
"ggplot2" = "3.5.1",
"tibble" = "3.2.1",
"tidyr" = "1.3.1",
"readr" = "2.1.5",
"purrr" = "1.0.2",
"dplyr" = "1.1.4",
"stringr" = "1.5.1",
"forcats" = "1.0.0",
"lubridate" = "1.9.4",
"future.apply" = "1.11.3",
"Matrix" = "1.7",
"data.table" = "1.17.0",
"partitions" = "1.10-7",
"fastDummies" = "1.7.5"
)
for (pkg in names(req_pkgs)) {
v_req <- req_pkgs[[pkg]]
# install only if missing or wrong version is installed
if (!in_env(pkg, v_req)) {
message(paste0("Installing ", pkg, " ", v_req, "..."))
remotes::install_version(
package = pkg,
version = v_req,
repos   = "https://cloud.r-project.org",
quiet = TRUE
)
} else {
message(paste0(pkg, " ", v_req, " already installed."))
}
}
# helper to check whether package version is installed
in_env <- function(pkg, version) {
if (!pkg %in% rownames(installed.packages())) return(FALSE)
as.character(packageVersion(pkg)) == version
}
# install remotes if needed
if (!requireNamespace("remotes", quietly=TRUE)) {
install.packages("remotes")
}
req_pkgs <- list(
"future" = "1.34.0",
"openxlsx" = "4.2.8",
"tidyverse" = "2.0.0",
"ggplot2" = "3.5.1",
"tibble" = "3.2.1",
"tidyr" = "1.3.1",
"readr" = "2.1.5",
"purrr" = "1.0.2",
"dplyr" = "1.1.4",
"stringr" = "1.5.1",
"forcats" = "1.0.0",
"lubridate" = "1.9.4",
"future.apply" = "1.11.3",
"Matrix" = "1.7.0",
"data.table" = "1.17.0",
"partitions" = "1.10-7",
"fastDummies" = "1.7.5"
)
for (pkg in names(req_pkgs)) {
v_req <- req_pkgs[[pkg]]
# install only if missing or wrong version is installed
if (!in_env(pkg, v_req)) {
message(paste0("Installing ", pkg, " ", v_req, "..."))
remotes::install_version(
package = pkg,
version = v_req,
repos   = "https://cloud.r-project.org",
quiet = TRUE
)
} else {
message(paste0(pkg, " ", v_req, " already installed."))
}
}
# helper to check whether package version is installed
in_env <- function(pkg, version) {
if (!pkg %in% rownames(installed.packages())) return(FALSE)
as.character(packageVersion(pkg)) == version
}
# install remotes if needed
if (!requireNamespace("remotes", quietly=TRUE)) {
install.packages("remotes")
}
req_pkgs <- list(
"future" = "1.34.0",
"openxlsx" = "4.2.8",
"tidyverse" = "2.0.0",
"ggplot2" = "3.5.1",
"tibble" = "3.2.1",
"tidyr" = "1.3.1",
"readr" = "2.1.5",
"purrr" = "1.0.2",
"dplyr" = "1.1.4",
"stringr" = "1.5.1",
"forcats" = "1.0.0",
"lubridate" = "1.9.4",
"future.apply" = "1.11.3",
"Matrix" = "1.7.0",
"data.table" = "1.17.0",
"partitions" = "1.10.7",
"fastDummies" = "1.7.5"
)
for (pkg in names(req_pkgs)) {
v_req <- req_pkgs[[pkg]]
# install only if missing or wrong version is installed
if (!in_env(pkg, v_req)) {
message(paste0("Installing ", pkg, " ", v_req, "..."))
remotes::install_version(
package = pkg,
version = v_req,
repos   = "https://cloud.r-project.org",
quiet = TRUE
)
} else {
message(paste0(pkg, " ", v_req, " already installed."))
}
}
help("library")
